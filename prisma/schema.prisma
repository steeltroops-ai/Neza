// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  PROVIDER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  PENDING_APPROVAL
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionType {
  PAYMENT
  PAYOUT
  REFUND
  ESCROW_HOLD
  ESCROW_RELEASE
  WITHDRAWAL
  DEPOSIT
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  phone             String?           @unique
  passwordHash      String?
  firstName         String
  lastName          String
  role              UserRole          @default(CLIENT)
  status            UserStatus        @default(PENDING_VERIFICATION)
  avatar            String?
  bio               String?
  dateOfBirth       DateTime?
  gender            String?
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  latitude          Float?
  longitude         Float?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  lastLoginAt       DateTime?
  emailVerified     Boolean           @default(false)
  phoneVerified     Boolean           @default(false)
  isOnline          Boolean           @default(false)
  averageRating     Float?            @default(0)
  totalReviews      Int               @default(0)
  wallet            Wallet?
  providedServices  Service[]         @relation("ProviderServices")
  bookingsAsClient  Booking[]         @relation("ClientBookings")
  bookingsAsProvider Booking[]        @relation("ProviderBookings")
  reviewsGiven      Review[]          @relation("ReviewGiver")
  reviewsReceived   Review[]          @relation("ReviewReceiver")
  sentMessages      Message[]         @relation("MessageSender")
  receivedMessages  Message[]         @relation("MessageReceiver")
  notifications     Notification[]    @relation("UserNotifications")
  documents         Document[]        @relation("UserDocuments")
  verificationCodes VerificationCode[] @relation("UserVerificationCodes")
  transactions      Transaction[]     @relation("UserTransactions")
  availability      Availability[]     @relation("ProviderAvailability")
  disputes          Dispute[]         @relation("UserDisputes")
}

model Wallet {
  id            String        @id @default(uuid())
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance       Float         @default(0)
  escrowBalance Float         @default(0)
  currency      String        @default("NGN")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactions  Transaction[] @relation("WalletTransactions")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  icon        String?
  slug        String    @unique
  parentId    String?
  parent      Category? @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  services    Service[]  @relation("CategoryServices")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id              String        @id @default(uuid())
  title           String
  description     String
  shortDescription String?
  price           Float
  discountPrice   Float?
  duration        Int           // in minutes
  categoryId      String
  category        Category      @relation("CategoryServices", fields: [categoryId], references: [id])
  providerId      String
  provider        User          @relation("ProviderServices", fields: [providerId], references: [id])
  status          ServiceStatus @default(PENDING_APPROVAL)
  featured        Boolean       @default(false)
  images          String[]      // Array of image URLs
  tags            String[]      // Array of tags
  location        String?
  latitude        Float?
  longitude       Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bookings        Booking[]     @relation("ServiceBookings")
  reviews         Review[]      @relation("ServiceReviews")
  averageRating   Float         @default(0)
  totalReviews    Int           @default(0)
}

model Booking {
  id              String        @id @default(uuid())
  clientId        String
  client          User          @relation("ClientBookings", fields: [clientId], references: [id])
  providerId      String
  provider        User          @relation("ProviderBookings", fields: [providerId], references: [id])
  serviceId       String
  service         Service       @relation("ServiceBookings", fields: [serviceId], references: [id])
  startTime       DateTime
  endTime         DateTime
  status          BookingStatus @default(PENDING)
  totalAmount     Float
  notes           String?
  cancellationReason String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  payments        Payment[]     @relation("BookingPayments")
  reviews         Review[]      @relation("BookingReviews")
  disputes        Dispute[]     @relation("BookingDisputes")
}

model Payment {
  id              String        @id @default(uuid())
  bookingId       String
  booking         Booking       @relation("BookingPayments", fields: [bookingId], references: [id])
  amount          Float
  currency        String        @default("NGN")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String
  paymentGateway  String
  transactionId   String?       // External payment gateway transaction ID
  paymentDate     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transactions    Transaction[] @relation("PaymentTransactions")
}

model Transaction {
  id              String          @id @default(uuid())
  userId          String
  user            User            @relation("UserTransactions", fields: [userId], references: [id])
  walletId        String?
  wallet          Wallet?         @relation("WalletTransactions", fields: [walletId], references: [id])
  paymentId       String?
  payment         Payment?        @relation("PaymentTransactions", fields: [paymentId], references: [id])
  amount          Float
  currency        String          @default("NGN")
  type            TransactionType
  description     String?
  reference       String          @unique
  metadata        Json?           // Additional data about the transaction
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Review {
  id              String    @id @default(uuid())
  bookingId       String
  booking         Booking   @relation("BookingReviews", fields: [bookingId], references: [id])
  serviceId       String
  service         Service   @relation("ServiceReviews", fields: [serviceId], references: [id])
  giverId         String
  giver           User      @relation("ReviewGiver", fields: [giverId], references: [id])
  receiverId      String
  receiver        User      @relation("ReviewReceiver", fields: [receiverId], references: [id])
  rating          Int       // 1-5 stars
  comment         String?
  reply           String?
  replyDate       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Message {
  id              String    @id @default(uuid())
  senderId        String
  sender          User      @relation("MessageSender", fields: [senderId], references: [id])
  receiverId      String
  receiver        User      @relation("MessageReceiver", fields: [receiverId], references: [id])
  content         String
  read            Boolean   @default(false)
  readAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Notification {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation("UserNotifications", fields: [userId], references: [id])
  title           String
  message         String
  type            String    // e.g., "booking", "message", "payment", "system"
  read            Boolean   @default(false)
  readAt          DateTime?
  link            String?   // Optional link to navigate to
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Document {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation("UserDocuments", fields: [userId], references: [id])
  type            String    // e.g., "id", "certificate", "license"
  name            String
  url             String
  verified        Boolean   @default(false)
  verifiedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model VerificationCode {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation("UserVerificationCodes", fields: [userId], references: [id])
  code            String
  type            String    // e.g., "email", "phone", "password-reset"
  expiresAt       DateTime
  used            Boolean   @default(false)
  usedAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Availability {
  id              String    @id @default(uuid())
  providerId      String
  provider        User      @relation("ProviderAvailability", fields: [providerId], references: [id])
  dayOfWeek       Int       // 0-6 (Sunday-Saturday)
  startTime       String    // Format: "HH:MM" (24-hour)
  endTime         String    // Format: "HH:MM" (24-hour)
  isAvailable     Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([providerId, dayOfWeek, startTime, endTime])
}

model Dispute {
  id              String    @id @default(uuid())
  bookingId       String
  booking         Booking   @relation("BookingDisputes", fields: [bookingId], references: [id])
  userId          String
  user            User      @relation("UserDisputes", fields: [userId], references: [id])
  reason          String
  description     String
  status          String    // e.g., "open", "under_review", "resolved", "closed"
  resolution      String?
  resolvedAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}